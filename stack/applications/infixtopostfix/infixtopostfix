package javapracticeprograms;
import java.util.Scanner;
import java.util.Stack;
import java.lang.reflect.Array;
import java.util.ArrayList;
class treenode{
	char data;
	treenode left=null;
	treenode right=null;
}
class tree{
Stack<Character> stack=new Stack();
	int precedence(char ch) {
		int p=0;
		if(ch=='+'||ch=='-')p=1;
		else if(ch=='*'||ch=='/'||ch=='%')p=2;
		else if(ch=='^')p=3;
		return p;
	}
	String postfix(String s) {
		String post="";
		for(int i=0;i<s.length();i++) {
			char ch=s.charAt(i);
			if(Character.isLetter(ch)||Character.isDigit(ch)) {
				post+=ch;
			}
			else if(ch=='(') {
				stack.push(ch);
			}
			else if(ch==')') {
				while(stack.peek()!='(') {
					post+=stack.pop();
				}
				stack.pop();
			}
			else if(ch=='+'||ch=='-'||ch=='*'||ch=='/'||ch=='%'||ch=='^') {
				if(stack.isEmpty())
					stack.push(ch);
				else if(precedence(stack.peek())>=precedence(ch)) {
					post+=stack.pop();
				}
				else {
					stack.push(ch);
				}
			}
		}
		while(!stack.isEmpty()) {
			post+=stack.pop();
		}
		System.out.println(post);
		return post;
	}
}
public class infixtopostfix {
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc=new Scanner(System.in);
		System.out.println("enter an infix expression");
		String expression=sc.next();
		tree t=new tree();
		t.postfix(expression);
	}

}
